# Generated by Django 2.2.6 on 2019-12-08 23:47

import django.contrib.auth.models
from django.db import migrations, models
import django.db.models.deletion
import location_field.models.plain


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='Place',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('city', models.CharField(max_length=255)),
                ('location', location_field.models.plain.PlainLocationField(max_length=63)),
            ],
        ),
        migrations.CreateModel(
            name='Rider',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('auth.user',),
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='RideShare',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('return_trip', models.BooleanField(help_text='If the driver is taking passengers on the ride back')),
                ('departure_date', models.DateField(help_text='When the driver plans to depart from starting location')),
                ('return_date', models.DateField(help_text='OPTIONAL: When the driver plans to return from end location (if is offering return trip)')),
                ('cost_per_passenger', models.DecimalField(decimal_places=2, help_text='The cost the driver wishes to charge per passenger', max_digits=5)),
                ('driver', models.ForeignKey(help_text='The Rider who is offering to drive the trip', on_delete=django.db.models.deletion.PROTECT, related_name='driver_of_rideshare_rideshare', to='rideshare.Rider')),
                ('end_location', models.ForeignKey(help_text='The end location of this rideshare', on_delete=django.db.models.deletion.CASCADE, related_name='endlocation_of_rideshare_rideshare', to='rideshare.Place')),
                ('passengers', models.ManyToManyField(help_text='The passengers who will be embarking on this trip', related_name='passenger_of_rideshare_rideshare', to='rideshare.Rider')),
                ('pending_passengers', models.ManyToManyField(help_text='The passengers who whish to embark on this trip but have not been accepted by the driver yet', related_name='pendingpassenger_of_rideshare_rideshare', to='rideshare.Rider')),
                ('start_location', models.ForeignKey(help_text='The start location of this rideshare', on_delete=django.db.models.deletion.CASCADE, related_name='startlocation_of_rideshare_rideshare', to='rideshare.Place')),
            ],
        ),
        migrations.CreateModel(
            name='Community',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Unique name for you rideshare community', max_length=20, unique=True)),
                ('slug', models.CharField(blank=True, editable=False, help_text='Unique URL path to access this community. Generated by the system.', max_length=20)),
                ('areas', models.ManyToManyField(blank=True, help_text='The areas in which this community will offer rideshares in (this is used for Riders to find the right communities)', to='rideshare.Place')),
                ('members', models.ManyToManyField(blank=True, help_text='The Riders that are allowed to create and participate in ridesharing in this community', related_name='member_of_rideshare_community', to='rideshare.Rider')),
                ('moderators', models.ManyToManyField(help_text='The Riders that manage the community. Designated by the owner.', related_name='moderator_of_rideshare_community', to='rideshare.Rider')),
                ('owner', models.ForeignKey(help_text='The Rider that owns the community', on_delete=django.db.models.deletion.PROTECT, related_name='owner_of_rideshare_community', to='rideshare.Rider')),
                ('rideshares', models.ManyToManyField(blank=True, help_text='The current rideshares that are listed under this community', to='rideshare.RideShare')),
            ],
        ),
    ]
